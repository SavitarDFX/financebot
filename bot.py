import ssl
import asyncio
import requests
import sqlite3
from sqlite3 import Error
from datetime import datetime, timedelta
import nest_asyncio
from bs4 import BeautifulSoup
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import pytz

try:
    ssl._create_default_https_context = ssl._create_unverified_context
except AttributeError:
    pass

TOKEN = "8000056252:AAH1BZNIygpX9f-weNLbhxfbB1dYiNVdMI4"
bot = Bot(token=TOKEN)
subscribed_users = set()

try:
    nest_asyncio.apply()
except RuntimeError:
    pass


def create_connection():
    conn = None
    try:
        conn = sqlite3.connect("finance_bot.db")
        return conn
    except Error as e:
        print(e)
    return conn


def create_tables(conn):
    try:
        c = conn.cursor()
        c.execute(
            """CREATE TABLE IF NOT EXISTS currency_rates
                     (id INTEGER PRIMARY KEY, currency TEXT, rate REAL, timestamp TEXT)"""
        )
        c.execute(
            """CREATE TABLE IF NOT EXISTS zvr_data
                     (id INTEGER PRIMARY KEY, value REAL, timestamp TEXT)"""
        )
        c.execute(
            """CREATE TABLE IF NOT EXISTS ai95_prices
                     (id INTEGER PRIMARY KEY, price REAL, timestamp TEXT)"""
        )
        conn.commit()
    except Error as e:
        print(e)


def get_currency_rate(currency):
    url = f"https://api.nbrb.by/exrates/rates/{currency}?parammode=2"
    response = requests.get(url, verify=False)
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

    if response.status_code == 200:
        data = response.json()
        return data.get("Cur_OfficialRate", "N/A")
    else:
        return "N/A"


def get_currency_rates():
    currencies = ["USD", "EUR", "RUB", "CNY"]
    return {cur: get_currency_rate(cur) for cur in currencies}


def save_currency_rate_to_db(conn, rates):
    timestamp = datetime.now(pytz.timezone("Europe/Minsk")).isoformat()
    c = conn.cursor()
    for cur, rate in rates.items():
        if rate != "N/A":
            c.execute(
                "INSERT INTO currency_rates (currency, rate, timestamp) VALUES (?, ?, ?)",
                (cur, float(rate), timestamp),
            )
    conn.commit()


def save_zvr_to_db(conn, zvr_value):
    if zvr_value is not None:
        timestamp = datetime.now(pytz.timezone("Europe/Minsk")).isoformat()
        c = conn.cursor()
        c.execute(
            "INSERT INTO zvr_data (value, timestamp) VALUES (?, ?)",
            (zvr_value, timestamp),
        )
        conn.commit()
    else:
        print("[LOG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ó–í–† –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


def save_ai95_to_db(conn, price_value):
    if price_value is not None:
        timestamp = datetime.now(pytz.timezone("Europe/Minsk")).isoformat()
        c = conn.cursor()
        c.execute(
            "INSERT INTO ai95_prices (price, timestamp) VALUES (?, ?)",
            (price_value, timestamp),
        )
        conn.commit()
    else:
        print("[LOG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º –Ω–∞ –±–µ–Ω–∑–∏–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


def get_dynamics(conn):
    now = datetime.now(pytz.timezone("Europe/Minsk"))
    month_ago = (now - timedelta(days=30)).isoformat()

    dynamics = {}
    time_range = "0 –¥–Ω–µ–π"

    c = conn.cursor()

    for currency in ["USD", "EUR", "RUB", "CNY"]:
        c.execute(
            "SELECT rate, timestamp FROM currency_rates WHERE currency = ? ORDER BY timestamp DESC LIMIT 1",
            (currency,),
        )
        current = c.fetchone()
        c.execute(
            "SELECT rate, timestamp FROM currency_rates WHERE currency = ? AND timestamp >= ? ORDER BY timestamp ASC LIMIT 1",
            (currency, month_ago),
        )
        oldest = c.fetchone()

        if current and oldest:
            current_rate, current_timestamp = current
            oldest_rate, oldest_timestamp = oldest
            time_diff = datetime.fromisoformat(
                current_timestamp
            ) - datetime.fromisoformat(oldest_timestamp)
            time_range = max(time_range, f"{time_diff.days} –¥–Ω–µ–π")

            change = current_rate - oldest_rate
            percent_change = (change / oldest_rate) * 100
            dynamics[f"{currency}_BYN"] = f"{change:+.4f} {percent_change:+.2f}%"

    for table, key in [("zvr_data", "value"), ("ai95_prices", "price")]:
        c.execute(
            f"SELECT {key}, timestamp FROM {table} ORDER BY timestamp DESC LIMIT 1"
        )
        current = c.fetchone()
        c.execute(
            f"SELECT {key}, timestamp FROM {table} WHERE timestamp >= ? ORDER BY timestamp ASC LIMIT 1",
            (month_ago,),
        )
        oldest = c.fetchone()

        if current and oldest:
            current_value, current_timestamp = current
            oldest_value, oldest_timestamp = oldest
            time_diff = datetime.fromisoformat(
                current_timestamp
            ) - datetime.fromisoformat(oldest_timestamp)
            time_range = max(time_range, f"{time_diff.days} –¥–Ω–µ–π")

            change = current_value - oldest_value
            percent_change = (change / oldest_value) * 100
            dynamics[table] = f"{change:+.2f} {percent_change:+.2f}%"

    return dynamics, time_range


def analyze_dynamics(dynamics):
    max_deviation = max(
        abs(float(d.split()[1].strip("()%"))) for d in dynamics.values()
    )

    if max_deviation > 10:
        return "üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    elif max_deviation > 5:
        return "‚ö†Ô∏è –õ—É—á—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É"
    else:
        return "‚úÖ –í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"


def get_reserve_assets():
    url = "https://www.nbrb.by/statistics/reserveassets/assets"
    response = requests.get(url, verify=False)
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

    if response.status_code != 200:
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ó–í–†.", None

    soup = BeautifulSoup(response.text, "html.parser")
    rows = soup.select("tbody tr")

    if len(rows) < 5:
        return "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ó–í–†.", None

    latest_date = rows[0].select_one("td").text.strip()
    latest_value = float(
        rows[0].select("td")[1].text.replace("\xa0", "").replace(",", ".")
    )

    if len(rows) >= 5:
        four_months_ago_value = float(
            rows[4].select("td")[1].text.replace("\xa0", "").replace(",", ".")
        )
        percent_change = (
            (latest_value - four_months_ago_value) / four_months_ago_value
        ) * 100
        change_sign = "+" if percent_change >= 0 else ""
    else:
        change_sign = ""
        percent_change = 0

    return (
        f"üìÖ –ù–∞ {latest_date} –æ–±—ä–µ–º –ó–í–†: <b>{latest_value:.1f} –º–ª–Ω USD</b> ({change_sign}{percent_change:.1f}%)",
        latest_value,
    )


def get_ai95_prices():
    url = "https://autotraveler.ru/belarus/dinamika-izmenenija-cen-na-benzin-v-belarusi.html"
    response = requests.get(url)
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

    if response.status_code != 200:
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –±–µ–Ω–∑–∏–Ω.", None

    soup = BeautifulSoup(response.text, "html.parser")
    local_header = soup.find("h2", {"id": "local"})
    if not local_header:
        return (
            "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –±–µ–Ω–∑–∏–Ω'.",
            None,
        )

    table = local_header.find_next("table", class_="table table-bordered table-hover")
    if not table:
        return "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –±–µ–Ω–∑–∏–Ω—É.", None

    rows = table.find_all("tr")[1:]
    for row in rows:
        cols = row.find_all("td")
        if cols[0].text.strip() == "–ë–µ–Ω–∑–∏–Ω 95":
            current_price = cols[1].text.strip().replace("BYN", "").strip()
            return current_price, float(current_price.replace("*", ""))

    return "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –±–µ–Ω–∑–∏–Ω—É 95.", None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    subscribed_users.add(user_id)
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")

    keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É.",
        reply_markup=reply_markup,
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É":
        await report(update, context)


async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id

    message = await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å...")

    conn = create_connection()

    currencies = ["USD", "EUR", "RUB", "CNY"]
    rates = {}
    status_message = ""
    for cur in currencies:
        rate = get_currency_rate(cur)
        rates[cur] = rate
        status_message += (
            f"–ó–∞–ø—Ä–æ—Å {cur}/BYN (–ù–∞—Ü–ë–∞–Ω–∫) - {'–£—Å–ø–µ—à–Ω–æ' if rate != 'N/A' else '–û—à–∏–±–∫–∞'}\n"
        )
        await message.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å...\n\n{status_message}")
    save_currency_rate_to_db(conn, rates)

    zvr_data, zvr_value = get_reserve_assets()
    save_zvr_to_db(conn, zvr_value)
    status_message += (
        f"–ó–∞–ø—Ä–æ—Å –ó–í–† (–ù–∞—Ü–ë–∞–Ω–∫) - {'–£—Å–ø–µ—à–Ω–æ' if zvr_value is not None else '–û—à–∏–±–∫–∞'}\n"
    )
    await message.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å...\n\n{status_message}")

    ai95_price, ai95_value = get_ai95_prices()
    save_ai95_to_db(conn, ai95_value)
    status_message += (
        f"–ó–∞–ø—Ä–æ—Å –ë–µ–Ω–∑–∏–Ω 95 - {'–£—Å–ø–µ—à–Ω–æ' if ai95_value is not None else '–û—à–∏–±–∫–∞'}\n"
    )
    await message.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å...\n\n{status_message}")

    dynamics, time_range = get_dynamics(conn)
    status = analyze_dynamics(dynamics)

    final_message = f"<b>{status}</b>\n\n"
    final_message += f"üìä <b><u>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ù–ë–†–ë):</u></b>\n"
    for currency in currencies:
        rate = rates.get(currency, "N/A")
        dynamic = dynamics.get(f"{currency}_BYN", "")
        if rate != "N/A" and dynamic:
            change_byn, percent = dynamic.split(" ", 1)
            change_byn = change_byn.replace("BYN", "").strip()
            final_message += f"<b>{currency}/BYN:</b> {rate} BYN \n <b>–î–∏–Ω–∞–º–∏–∫–∞:</b> {change_byn}—Ä, {percent}\n\n"
        else:
            final_message += f"<b>{currency}/BYN:</b> {rate}\n"
    final_message += f"\nüè¶ <b><u>–ó–æ–ª–æ—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã:</u></b>\n{zvr_data}\n\n"
    final_message += f"‚õΩ <b><u>–ë–µ–Ω–∑–∏–Ω 95:</u></b>\n<b>–¶–µ–Ω–∞:</b> {ai95_value} BYN\n\n"
    final_message += f"–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞: {time_range}"

    await message.edit_text(final_message, parse_mode="HTML")

    conn.close()


async def send_updates(force=False):
    conn = create_connection()
    rates = get_currency_rates()
    save_currency_rate_to_db(conn, rates)
    zvr_data, zvr_value = get_reserve_assets()
    save_zvr_to_db(conn, zvr_value)
    ai95_price, ai95_value = get_ai95_prices()
    save_ai95_to_db(conn, ai95_value)

    dynamics, time_range = get_dynamics(conn)
    status = analyze_dynamics(dynamics)

    if force or status != "‚úÖ –í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è":
        message = f"<b>{status}</b>\n\n"
        message += f"üìä <b><u>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ù–ë–†–ë):</u></b>\n"
        for currency in ["USD", "EUR", "RUB", "CNY"]:
            rate = rates.get(currency, "N/A")
            dynamic = dynamics.get(f"{currency}_BYN", "")
            if rate != "N/A" and dynamic:
                change_byn, percent = dynamic.split(" ", 1)
                change_byn = change_byn.replace("BYN", "").strip()
                message += f"<b>{currency}/BYN:</b> {rate} BYN \n <b>–î–∏–Ω–∞–º–∏–∫–∞:</b> {change_byn}—Ä, {percent}\n\n"
            else:
                message += f"<b>{currency}/BYN:</b> {rate}\n"
        message += f"\nüè¶ <b><u>–ó–æ–ª–æ—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã:</u></b>\n{zvr_data}\n\n"
        message += f"‚õΩ <b><u>–ë–µ–Ω–∑–∏–Ω 95:</u></b>\n<b>–¶–µ–Ω–∞:</b> {ai95_value} BYN\n\n"
        message += f"<b>–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞:</b> {time_range}"

        for user_id in subscribed_users:
            try:
                await bot.send_message(user_id, message, parse_mode="HTML")
            except Exception as e:
                print(
                    f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                )

    conn.close()


async def schedule_updates():
    while True:
        now = datetime.now(pytz.timezone("Europe/Minsk"))
        if now.hour in [9, 12, 15, 18, 21, 0] and now.minute == 0:
            await send_updates(force=True)
        elif now.minute % 30 == 0:
            await send_updates()
        await asyncio.sleep(60)


async def main():
    conn = create_connection()
    if conn is not None:
        create_tables(conn)
    else:
        print("Error! Cannot create the database connection.")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    asyncio.create_task(schedule_updates())

    await application.run_polling()

    conn.close()


if __name__ == "__main__":
    asyncio.run(main())
