import ssl
import asyncio
import requests
from pymongo import MongoClient
from datetime import datetime, timedelta
import nest_asyncio  # –î–ª—è MacOS
from bs4 import BeautifulSoup
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.helpers import escape_markdown

ssl._create_default_https_context = ssl._create_unverified_context

TOKEN = "8000056252:AAH1BZNIygpX9f-weNLbhxfbB1dYiNVdMI4"
bot = Bot(token=TOKEN)
subscribed_users = set()

# –§–∏–∫—Å–∏—Ä—É–µ–º event loop (—Ç–æ–ª—å–∫–æ –¥–ª—è MacOS)
nest_asyncio.apply()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
db = client["currency_db"]  # –°–æ–∑–¥–∞–µ–º/–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
currency_collection = db["currency_rates"]  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Å –ù–ë–†–ë
def get_currency_rates():
    currencies = ["USD", "EUR", "RUB", "CNY"]
    rates = {}

    for cur in currencies:
        url = f"https://api.nbrb.by/exrates/rates/{cur}?parammode=2"
        response = requests.get(url, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            sale_rate = data.get("Cur_OfficialRate", None)
            if sale_rate:
                rates[cur] = sale_rate  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏
            else:
                rates[cur] = "N/A"
        else:
            rates[cur] = "N/A"

    return rates

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≤ MongoDB
def save_currency_rate_to_db(rates):
    timestamp = datetime.now()
    for cur, rate in rates.items():
        if rate != "N/A":
            currency_collection.insert_one({
                "currency": cur,
                "rate": rate,
                "timestamp": timestamp
            })
        else:
            print(f"[LOG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {cur}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
def get_currency_dynamic(currency):
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    start_of_day = datetime.combine(datetime.today(), datetime.min.time())  # –ù–∞—á–∞–ª–æ –¥–Ω—è (00:00)
    end_of_day = datetime.now()  # –ö–æ–Ω–µ—Ü –¥–Ω—è (—Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç)

    # –ò—â–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    pipeline = [
        {"$match": {"currency": currency, "timestamp": {"$gte": start_of_day, "$lte": end_of_day}}},
        {"$sort": {"timestamp": 1}},  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        {"$project": {"rate": 1, "timestamp": 1}}
    ]
    rates = list(currency_collection.aggregate(pipeline))

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(rates) == 0:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å."

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º +0% –∏ +0 BYN
    first_rate = rates[0]['rate']
    last_rate = rates[-1]['rate']

    change_byn = last_rate - first_rate
    change_percent = (change_byn / first_rate) * 100

    return f"{change_byn:+.2f} BYN ({change_percent:+.2f}%) –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ó–í–†
def get_reserve_assets():
    url = "https://www.nbrb.by/statistics/reserveassets/assets"
    response = requests.get(url, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

    if response.status_code != 200:
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ó–í–†."

    soup = BeautifulSoup(response.text, "html.parser")
    rows = soup.select("tbody tr")

    if len(rows) < 5:
        return "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ó–í–†."

    latest_date = rows[0].select_one("td").text.strip()
    latest_value = float(rows[0].select("td")[1].text.replace("\xa0", "").replace(",", "."))

    old_value = float(rows[4].select("td")[1].text.replace("\xa0", "").replace(",", "."))

    percent_change = ((latest_value - old_value) / old_value) * 100

    return f"üìÖ –ù–∞ {latest_date} –æ–±—ä–µ–º –ó–í–†: {latest_value:.1f} –º–ª–Ω USD ({percent_change:+.2f}% –∑–∞ 4 –º–µ—Å—è—Ü–∞)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–Ω–∑–∏–Ω–∞
def get_ai95_prices():
    url = "https://autotraveler.ru/belarus/dinamika-izmenenija-cen-na-benzin-v-belarusi.html"
    response = requests.get(url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print(f"[LOG] –ó–∞–ø—Ä–æ—Å: {url} -> {response.status_code}")

    if response.status_code != 200:
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –±–µ–Ω–∑–∏–Ω."

    soup = BeautifulSoup(response.text, "html.parser")

    # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É–∂–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–º
    local_header = soup.find("h2", {"id": "local"})
    if not local_header:
        return "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –±–µ–Ω–∑–∏–Ω'."

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—É —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –±–µ–Ω–∑–∏–Ω
    table = local_header.find_next("table", class_="table table-bordered table-hover")
    if not table:
        return "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –±–µ–Ω–∑–∏–Ω—É."

    rows = table.find_all("tr")[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    ai95_data = {}

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–µ–Ω–∑–∏–Ω—É 95
    for row in rows:
        cols = row.find_all("td")
        fuel_type = cols[0].text.strip()
        
        if fuel_type == "–ë–µ–Ω–∑–∏–Ω 95":
            current_price = cols[1].text.strip().replace("BYN", "").strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –∏ –≥–æ–¥–æ–≤–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
            month_change = cols[3].text.strip().split("\n")[0].replace("BYN", "").strip()
            month_percentage = cols[3].find("sub").text.strip().replace("%", "").strip()

            year_change = cols[4].text.strip().split("\n")[0].replace("BYN", "").strip()
            year_percentage = cols[4].find("sub").text.strip().replace("%", "").strip()

            ai95_data = {
                "current_price": current_price,
                "month_change": month_change,
                "month_percentage": month_percentage,
                "year_change": year_change,
                "year_percentage": year_percentage
            }

    if not ai95_data:
        return "‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –±–µ–Ω–∑–∏–Ω—É 95."

    current_price = ai95_data['current_price']
    month_change = ai95_data['month_change']
    month_percentage = ai95_data['month_percentage']
    year_change = ai95_data['year_change']
    year_percentage = ai95_data['year_percentage']

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º % –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    return f"‚õΩ –ë–µ–Ω–∑–∏–Ω 95:\n–¶–µ–Ω–∞: {current_price} BYN\n–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {month_change} BYN ({month_percentage}%)\n–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –≥–æ–¥: {year_change} BYN ({year_percentage}%)"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    subscribed_users.add(user_id)
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")

    keyboard = [["üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É"
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É":
        await report(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /report
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª /report")

    rates = get_currency_rates()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã –ø—Ä–æ–¥–∞–∂–∏
    save_currency_rate_to_db(rates)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ –±–∞–∑—É
    usd_dynamic = get_currency_dynamic("USD")
    eur_dynamic = get_currency_dynamic("EUR")
    cny_dynamic = get_currency_dynamic("CNY")
    rub_dynamic = get_currency_dynamic("RUB")
    zvr_data = get_reserve_assets()
    ai95_price = get_ai95_prices()

    message = f"üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ù–ë–†–ë):*\n"
    message += f"üíµ USD/BYN: {rates.get('USD', 'N/A')} ({usd_dynamic})\n"
    message += f"üí∂ EUR/BYN: {rates.get('EUR', 'N/A')} ({eur_dynamic})\n"
    message += f"üá®üá≥ CNY/BYN: {rates.get('CNY', 'N/A')} ({cny_dynamic})\n"
    message += f"üá∑üá∫ RUB/BYN: {rates.get('RUB', 'N/A')} ({rub_dynamic})\n\n"
    message += f"üè¶ *–ó–æ–ª–æ—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã:*\n{zvr_data}\n\n"
    message += f"{ai95_price}"

    message = escape_markdown(message, version=2)

    await update.message.reply_text(message, parse_mode="MarkdownV2")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_daily_updates():
    rates = get_currency_rates()
    save_currency_rate_to_db(rates)
    usd_dynamic = get_currency_dynamic("USD")
    eur_dynamic = get_currency_dynamic("EUR")
    cny_dynamic = get_currency_dynamic("CNY")
    rub_dynamic = get_currency_dynamic("RUB")
    zvr_data = get_reserve_assets()
    ai95_price = get_ai95_prices()

    message = f"üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ù–ë–†–ë):*\n"
    message += f"üíµ USD/BYN: {rates.get('USD', 'N/A')} ({usd_dynamic})\n"
    message += f"üí∂ EUR/BYN: {rates.get('EUR', 'N/A')} ({eur_dynamic})\n"
    message += f"üá®üá≥ CNY/BYN: {rates.get('CNY', 'N/A')} ({cny_dynamic})\n"
    message += f"üá∑üá∫ RUB/BYN: {rates.get('RUB', 'N/A')} ({rub_dynamic})\n\n"
    message += f"üè¶ *–ó–æ–ª–æ—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã:*\n{zvr_data}\n\n"
    message += f"{ai95_price}"

    message = escape_markdown(message, version=2)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in subscribed_users:
        try:
            await bot.send_message(user_id, message, parse_mode="MarkdownV2")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def schedule_updates():
    while True:
        now = datetime.now()
        if now.hour in [9, 12, 15, 18, 21, 24]:
            await send_daily_updates()
        await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    asyncio.create_task(schedule_updates())

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
